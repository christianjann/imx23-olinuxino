From 0dc5048c8fe74f506d457cef09235eaca1ac67f6 Mon Sep 17 00:00:00 2001
From: Fadil Berisha <f.koliqi@gmail.com>
Date: Tue, 29 Oct 2013 18:16:57 -0400
Subject: [PATCH] Add mcp23s08 SPI gpio expander

In this application mcp23s08 is used to expand imx23 gpio's with
GPIO 97,98, .... SPI chip select is connected on mcp23s08's  address
 pin A0 so chip select is done when A0 is low.
---
 arch/arm/boot/dts/imx23-olinuxino.dts |    9 ++
 drivers/gpio/gpio-mcp23s08.c          |  237 ++++++++++++++-------------------
 2 files changed, 110 insertions(+), 136 deletions(-)

diff --git a/arch/arm/boot/dts/imx23-olinuxino.dts b/arch/arm/boot/dts/imx23-olinuxino.dts
index fc766ae..ba7bede 100644
--- a/arch/arm/boot/dts/imx23-olinuxino.dts
+++ b/arch/arm/boot/dts/imx23-olinuxino.dts
@@ -65,6 +65,15 @@
 				pinctrl-names = "default";
 				pinctrl-0 = <&spi2_pins_a>;
 				status = "okay";
+			gpio3: gpio3@0 {
+					compatible = "microchip,mcp23s08";
+					addr = <0>;
+					base = <97>;
+					reg = <0>;
+					spi-max-frequency = <100000>;
+					gpio-controller;
+					#gpio-cells = <2>;	
+				};
 			};
 		};
 
diff --git a/drivers/gpio/gpio-mcp23s08.c b/drivers/gpio/gpio-mcp23s08.c
index 2deb0c5..e40d712 100644
--- a/drivers/gpio/gpio-mcp23s08.c
+++ b/drivers/gpio/gpio-mcp23s08.c
@@ -12,8 +12,6 @@
 #include <linux/spi/mcp23s08.h>
 #include <linux/slab.h>
 #include <asm/byteorder.h>
-#include <linux/of.h>
-#include <linux/of_device.h>
 
 /**
  * MCP types supported by driver
@@ -79,7 +77,7 @@ struct mcp23s08_driver_data {
 
 /*----------------------------------------------------------------------*/
 
-#if IS_ENABLED(CONFIG_I2C)
+#ifdef CONFIG_I2C
 
 static int mcp23008_read(struct mcp23s08 *mcp, unsigned reg)
 {
@@ -385,10 +383,6 @@ static int mcp23s08_probe_one(struct mcp23s08 *mcp, struct device *dev,
 	mcp->chip.direction_output = mcp23s08_direction_output;
 	mcp->chip.set = mcp23s08_set;
 	mcp->chip.dbg_show = mcp23s08_dbg_show;
-#ifdef CONFIG_OF
-	mcp->chip.of_gpio_n_cells = 2;
-	mcp->chip.of_node = dev->of_node;
-#endif
 
 	switch (type) {
 #ifdef CONFIG_SPI_MASTER
@@ -405,7 +399,7 @@ static int mcp23s08_probe_one(struct mcp23s08 *mcp, struct device *dev,
 		break;
 #endif /* CONFIG_SPI_MASTER */
 
-#if IS_ENABLED(CONFIG_I2C)
+#ifdef CONFIG_I2C
 	case MCP_TYPE_008:
 		mcp->ops = &mcp23008_ops;
 		mcp->chip.ngpio = 8;
@@ -479,80 +473,19 @@ fail:
 
 /*----------------------------------------------------------------------*/
 
-#ifdef CONFIG_OF
-#ifdef CONFIG_SPI_MASTER
-static struct of_device_id mcp23s08_spi_of_match[] = {
-	{
-		.compatible = "microchip,mcp23s08",
-		.data = (void *) MCP_TYPE_S08,
-	},
-	{
-		.compatible = "microchip,mcp23s17",
-		.data = (void *) MCP_TYPE_S17,
-	},
-/* NOTE: The use of the mcp prefix is deprecated and will be removed. */
-	{
-		.compatible = "mcp,mcp23s08",
-		.data = (void *) MCP_TYPE_S08,
-	},
-	{
-		.compatible = "mcp,mcp23s17",
-		.data = (void *) MCP_TYPE_S17,
-	},
-	{ },
-};
-MODULE_DEVICE_TABLE(of, mcp23s08_spi_of_match);
-#endif
-
-#if IS_ENABLED(CONFIG_I2C)
-static struct of_device_id mcp23s08_i2c_of_match[] = {
-	{
-		.compatible = "microchip,mcp23008",
-		.data = (void *) MCP_TYPE_008,
-	},
-	{
-		.compatible = "microchip,mcp23017",
-		.data = (void *) MCP_TYPE_017,
-	},
-/* NOTE: The use of the mcp prefix is deprecated and will be removed. */
-	{
-		.compatible = "mcp,mcp23008",
-		.data = (void *) MCP_TYPE_008,
-	},
-	{
-		.compatible = "mcp,mcp23017",
-		.data = (void *) MCP_TYPE_017,
-	},
-	{ },
-};
-MODULE_DEVICE_TABLE(of, mcp23s08_i2c_of_match);
-#endif
-#endif /* CONFIG_OF */
-
+#ifdef CONFIG_I2C
 
-#if IS_ENABLED(CONFIG_I2C)
-
-static int mcp230xx_probe(struct i2c_client *client,
+static int  mcp230xx_probe(struct i2c_client *client,
 				    const struct i2c_device_id *id)
 {
 	struct mcp23s08_platform_data *pdata;
 	struct mcp23s08 *mcp;
-	int status, base, pullups;
-	const struct of_device_id *match;
-
-	match = of_match_device(of_match_ptr(mcp23s08_i2c_of_match),
-					&client->dev);
-	pdata = dev_get_platdata(&client->dev);
-	if (match || !pdata) {
-		base = -1;
-		pullups = 0;
-	} else {
-		if (!gpio_is_valid(pdata->base)) {
-			dev_dbg(&client->dev, "invalid platform data\n");
-			return -EINVAL;
-		}
-		base = pdata->base;
-		pullups = pdata->chip[0].pullups;
+	int status;
+
+	pdata = client->dev.platform_data;
+	if (!pdata || !gpio_is_valid(pdata->base)) {
+		dev_dbg(&client->dev, "invalid or missing platform data\n");
+		return -EINVAL;
 	}
 
 	mcp = kzalloc(sizeof *mcp, GFP_KERNEL);
@@ -560,7 +493,8 @@ static int mcp230xx_probe(struct i2c_client *client,
 		return -ENOMEM;
 
 	status = mcp23s08_probe_one(mcp, &client->dev, client, client->addr,
-				    id->driver_data, base, pullups);
+				    id->driver_data, pdata->base,
+				    pdata->chip[0].pullups);
 	if (status)
 		goto fail;
 
@@ -574,7 +508,7 @@ fail:
 	return status;
 }
 
-static int mcp230xx_remove(struct i2c_client *client)
+static int  mcp230xx_remove(struct i2c_client *client)
 {
 	struct mcp23s08 *mcp = i2c_get_clientdata(client);
 	int status;
@@ -597,7 +531,6 @@ static struct i2c_driver mcp230xx_driver = {
 	.driver = {
 		.name	= "mcp230xx",
 		.owner	= THIS_MODULE,
-		.of_match_table = of_match_ptr(mcp23s08_i2c_of_match),
 	},
 	.probe		= mcp230xx_probe,
 	.remove		= mcp230xx_remove,
@@ -625,6 +558,52 @@ static void mcp23s08_i2c_exit(void) { }
 
 #ifdef CONFIG_SPI_MASTER
 
+static int mcp23s08_of_probe(struct spi_device *spi)
+{
+	struct mcp23s08_platform_data	*pdata;
+	unsigned	base, addr;
+	int 		i;
+
+	
+	if (!of_device_is_available(spi->dev.of_node)) {
+		dev_err(&spi->dev, "No device tree data available.\n");
+		return -EINVAL;
+	}
+
+	if (of_property_read_u32(spi->dev.of_node, "base", &base)) {
+		dev_err(&spi->dev, "Missing -base- property in the DT.\n");
+		return -EINVAL;
+	}
+	
+	if (of_property_read_u32(spi->dev.of_node, "addr", &addr)) {
+		dev_err(&spi->dev, "Missing -addr- property in the DT.\n");
+		return -EINVAL;
+	}
+	
+	if (addr > 3) {
+			dev_err(&spi->dev,
+				"mcp23s08 only supports address 0..3\n");
+		return -EINVAL;
+	}
+
+	pdata = kzalloc(sizeof(*pdata), GFP_KERNEL);
+	pdata->base = base;
+
+	for (i = 0; i < ARRAY_SIZE(pdata->chip); i++) {
+		if( i <= addr) {
+			dev_err(&spi->dev, "chip[%d].is_present = true\n", i);
+			pdata->chip[i].is_present = true;
+			}
+			else {
+				pdata->chip[i].is_present = false;
+			}
+	}
+	
+	spi->dev.platform_data = pdata;
+
+	return 0;
+}
+
 static int mcp23s08_probe(struct spi_device *spi)
 {
 	struct mcp23s08_platform_data	*pdata;
@@ -632,83 +611,58 @@ static int mcp23s08_probe(struct spi_device *spi)
 	unsigned			chips = 0;
 	struct mcp23s08_driver_data	*data;
 	int				status, type;
-	unsigned			base = -1,
-					ngpio = 0,
-					pullups[ARRAY_SIZE(pdata->chip)];
-	const struct			of_device_id *match;
-	u32				spi_present_mask = 0;
-
-	match = of_match_device(of_match_ptr(mcp23s08_spi_of_match), &spi->dev);
-	if (match) {
-		type = (int)match->data;
-		status = of_property_read_u32(spi->dev.of_node,
-			    "microchip,spi-present-mask", &spi_present_mask);
-		if (status) {
-			status = of_property_read_u32(spi->dev.of_node,
-				    "mcp,spi-present-mask", &spi_present_mask);
-			if (status) {
-				dev_err(&spi->dev,
-					"DT has no spi-present-mask\n");
-				return -ENODEV;
-			}
-		}
-		if ((spi_present_mask <= 0) || (spi_present_mask >= 256)) {
-			dev_err(&spi->dev, "invalid spi-present-mask\n");
-			return -ENODEV;
-		}
+	unsigned			base;
 
-		for (addr = 0; addr < ARRAY_SIZE(pdata->chip); addr++)
-			pullups[addr] = 0;
-	} else {
-		type = spi_get_device_id(spi)->driver_data;
-		pdata = dev_get_platdata(&spi->dev);
-		if (!pdata || !gpio_is_valid(pdata->base)) {
-			dev_dbg(&spi->dev,
-					"invalid or missing platform data\n");
-			return -EINVAL;
-		}
+	type = spi_get_device_id(spi)->driver_data;
+	
+#ifdef CONFIG_OF
+#include <linux/of.h>
 
-		for (addr = 0; addr < ARRAY_SIZE(pdata->chip); addr++) {
-			if (!pdata->chip[addr].is_present)
-				continue;
-			chips++;
-			if ((type == MCP_TYPE_S08) && (addr > 3)) {
-				dev_err(&spi->dev,
-					"mcp23s08 only supports address 0..3\n");
-				return -EINVAL;
-			}
-			spi_present_mask |= 1 << addr;
-			pullups[addr] = pdata->chip[addr].pullups;
-		}
+ 	status = mcp23s08_of_probe(spi);
 
-		if (!chips)
-			return -ENODEV;
+#endif
 
-		base = pdata->base;
+	pdata = spi->dev.platform_data;
+	
+	if (!pdata || !gpio_is_valid(pdata->base)) {
+		dev_dbg(&spi->dev, "invalid or missing platform data\n");
+		return -EINVAL;
 	}
 
+	for (addr = 0; addr < ARRAY_SIZE(pdata->chip); addr++) {
+		if (!pdata->chip[addr].is_present)
+			continue;
+		chips++;
+		if ((type == MCP_TYPE_S08) && (addr > 3)) {
+			dev_err(&spi->dev,
+				"mcp23s08 only supports address 0..3\n");
+			return -EINVAL;
+		}
+	}
+	if (!chips)
+		return -ENODEV;
+
 	data = kzalloc(sizeof *data + chips * sizeof(struct mcp23s08),
 			GFP_KERNEL);
 	if (!data)
 		return -ENOMEM;
 	spi_set_drvdata(spi, data);
 
+	base = pdata->base;
 	for (addr = 0; addr < ARRAY_SIZE(pdata->chip); addr++) {
-		if (!(spi_present_mask & (1 << addr)))
+		if (!pdata->chip[addr].is_present)
 			continue;
 		chips--;
 		data->mcp[addr] = &data->chip[chips];
 		status = mcp23s08_probe_one(data->mcp[addr], &spi->dev, spi,
 					    0x40 | (addr << 1), type, base,
-					    pullups[addr]);
+					    pdata->chip[addr].pullups);
 		if (status < 0)
 			goto fail;
 
-		if (base != -1)
-			base += (type == MCP_TYPE_S17) ? 16 : 8;
-		ngpio += (type == MCP_TYPE_S17) ? 16 : 8;
+		base += (type == MCP_TYPE_S17) ? 16 : 8;
 	}
-	data->ngpio = ngpio;
+	data->ngpio = base - pdata->base;
 
 	/* NOTE:  these chips have a relatively sane IRQ framework, with
 	 * per-signal masking and level/edge triggering.  It's not yet
@@ -754,6 +708,17 @@ static int mcp23s08_remove(struct spi_device *spi)
 	return status;
 }
 
+#ifdef CONFIG_OF
+static const struct of_device_id mcp23s08_dt_ids[] = {
+	{ .compatible = "microchip,mcp23s08", },
+	{ /* sentinel */ }
+};
+MODULE_DEVICE_TABLE(of, mcp23s08_dt_ids);
+#else
+#define mcp23s08_dt_ids NULL
+#endif
+
+
 static const struct spi_device_id mcp23s08_ids[] = {
 	{ "mcp23s08", MCP_TYPE_S08 },
 	{ "mcp23s17", MCP_TYPE_S17 },
@@ -768,7 +733,7 @@ static struct spi_driver mcp23s08_driver = {
 	.driver = {
 		.name	= "mcp23s08",
 		.owner	= THIS_MODULE,
-		.of_match_table = of_match_ptr(mcp23s08_spi_of_match),
+		.of_match_table = of_match_ptr(mcp23s08_dt_ids),
 	},
 };
 
-- 
1.7.10

